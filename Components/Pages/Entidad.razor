@page "/entidad/{tipo}"
@inject SerieContext Sc
@rendermode InteractiveServer
@inject NavigationManager NavMan

<PageTitle>Página de @Tipo</PageTitle>
<h3>Entidad @Tipo</h3>

<p>Agregados</p>



<div class="text-end">
    <button type = "button" @onclick = "AgregarNuevo" class = "btn btn-primary">Agregar</button>
</div>

<table class="table table-hover">
    <thead>
        <th>Nombre</th>
        <th>País</th>
        <th>Idioma</th>
        <th>Resúmen</th>
        <th>Foto</th>
    </thead>

    <tbody>
        @foreach(var item in lista){

            <tr>
                <td>@item.Nombre</td>
                <td>@item.Pais</td>
                <td>@item.Idioma</td>
                <td>@item.Resumen</td>
                <td><img src="@item.FotoUrl" alt="@item.Nombre" width="100" /></td>
                <td>
                    <button class="btn btn-success" @onclick = "() => editar(item.Id)">Editar</button>
                </td>
            </tr>
        }
    </tbody>

</table>

@code {

    [Parameter]

    public string Tipo { get; set; } = "";

    TipoEntidad tipoEntidad = TipoEntidad.Libro;

    protected override async Task OnParametersSetAsync(){

        switch(Tipo){

            case "libros":
                tipoEntidad = TipoEntidad.Libro;
                break;
            
            case "peliculas":
                tipoEntidad = TipoEntidad.Pelicula;
                break;

            case "series":
                tipoEntidad = TipoEntidad.Serie;
                break;
        }
    }

    List<SeriePeliculaLibro> lista = new List<SeriePeliculaLibro>();

    private void editar(int id){

        NavMan.NavigateTo($"entidad/{Tipo}/editar/{id}");
    }

    private void AgregarNuevo(){

        NavMan.NavigateTo($"entidad/{Tipo}/editar");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender){

        if (firstRender){

            lista = Sc.SeriePeliculaLibros.Where(x => x.Tipo == tipoEntidad).ToList();
            StateHasChanged();
        }
    }
}